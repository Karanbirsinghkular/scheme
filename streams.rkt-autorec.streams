#lang sicp

(define (stream-ref s n)
  (if (= n 0)
      (stream-car s)
      (stream-ref (stream-cdr s) (- n 1))))



(define (stream-filter pred stream)
  (cond ((stream-null? stream) the-empty-stream)
        ((pred (stream-car stream))
         (cons-stream (stream-car stream)
                      (stream-filter
                       pred
                       (stream-cdr stream))))
        (else (stream-filter pred (stream-cdr stream)))))

(define (stream-for-each proc s)
  (if (stream-null? s)
      'done
      (begin (proc (stream-car s))
             (stream-for-each proc (stream-cdr s)))))

(define (stream-car stream) (car stream))
(define (stream-cdr stream) (force (cdr stream)))

(define (stream-map proc . argstreams)
  (if (stream-null? (car argstreams))
      the-empty-stream
      (cons-stream
       (apply proc (map stream-car argstreams))
       (apply stream-map
              proc (map stream-cdr argstreams)))))

(define (stream-enumerate-interval low high)
  (if (> low high)
      the-empty-stream
      (cons-stream
       low
       (stream-enumerate-interval (+ low 1) high))))
;(define x (stream-enumerate-interval 1 5))
;(define y (stream-enumerate-interval 6 10))
;(define z (stream-enumerate-interval 11 15))
;(define res (stream-map + x y z))

(define (display-stream stream)
  (define (temp stream)
  (if (null? stream)
      (display ")")
    (begin(display (stream-car stream))
          (display " ")
          (temp (stream-cdr stream)))))
  (display "(")
  (temp stream))
;(print-stream res)

(define (add-streams s1 s2) (stream-map + s1 s2))

(define s (cons-stream 1 (add-streams s s)))
(display-stream s)