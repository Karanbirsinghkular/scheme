#lang sicp
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1)
                 (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1)
                 trials-passed))))
  (iter trials 0))

(define (pred? x y)
  (< (+ (* x x)
            (* y y))
         1))

(define (estimate-integral pred? x1 x2 y1 y2 trials)
  (define (experiment)
    (pred? (random-in-range x1 x2)
           (random-in-range y1 y2)))
  (* (- x2 x1)
     (- y2 y1)
     (monte-carlo trials experiment)))
(estimate-integral pred? -1.0 1.0 -1.0 1.0 1000000)
